// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=cache_mock.go -package=cache
//
// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	models "golang/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockCache) AddToCache(ctx context.Context, jid uint, jobdata models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCache", ctx, jid, jobdata)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockCacheMockRecorder) AddToCache(ctx, jid, jobdata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockCache)(nil).AddToCache), ctx, jid, jobdata)
}

// AddtoOTPCache mocks base method.
func (m *MockCache) AddtoOTPCache(ctx context.Context, email, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddtoOTPCache", ctx, email, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddtoOTPCache indicates an expected call of AddtoOTPCache.
func (mr *MockCacheMockRecorder) AddtoOTPCache(ctx, email, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddtoOTPCache", reflect.TypeOf((*MockCache)(nil).AddtoOTPCache), ctx, email, otp)
}

// DeleteCacheOtp mocks base method.
func (m *MockCache) DeleteCacheOtp(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCacheOtp", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCacheOtp indicates an expected call of DeleteCacheOtp.
func (mr *MockCacheMockRecorder) DeleteCacheOtp(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCacheOtp", reflect.TypeOf((*MockCache)(nil).DeleteCacheOtp), ctx, email)
}

// GetCacheOtp mocks base method.
func (m *MockCache) GetCacheOtp(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheOtp", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheOtp indicates an expected call of GetCacheOtp.
func (mr *MockCacheMockRecorder) GetCacheOtp(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheOtp", reflect.TypeOf((*MockCache)(nil).GetCacheOtp), ctx, email)
}

// GetTheCacheData mocks base method.
func (m *MockCache) GetTheCacheData(ctx context.Context, jid uint) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTheCacheData", ctx, jid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTheCacheData indicates an expected call of GetTheCacheData.
func (mr *MockCacheMockRecorder) GetTheCacheData(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTheCacheData", reflect.TypeOf((*MockCache)(nil).GetTheCacheData), ctx, jid)
}
